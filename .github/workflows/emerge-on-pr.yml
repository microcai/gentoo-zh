name: emerge

on:
  pull_request_target:
    branches:
      - master
    paths-ignore:
      - '.github/**'
      - 'metadata/**'
    types: [opened, reopened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  build:
    name: emerge changed ebuilds
    runs-on: ubuntu-latest
    container:
      image: gentoo/stage3:amd64-desktop-systemd
      options: --privileged

    steps:
    - name: sync gentoo main tree
      run: |
        emerge-webrsync

    - name: cat binrepos
      run: |
        cat /etc/portage/binrepos.conf/gentoobinhost.conf

    - name: setup features
      run: |
        echo 'FEATURES="getbinpkg"' >> /etc/portage/make.conf
        getuto

    - name: install depends
      run: |
        emerge --verbose --quiet --jobs $(nproc) --autounmask y --autounmask-continue y \
        app-eselect/eselect-repository \
        app-misc/jq \
        dev-vcs/git

    - name: fetch
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.sha }}
        path: gentoo-zh

    - name: setup gentoo-zh repo
      run: |
        eselect repository add gentoo-zh git `realpath ./gentoo-zh`
        emaint sync -r gentoo-zh

    - name: Get the base commit
      id: basecommit
      shell: bash
      env:
        COMMITS_URL: ${{ github.event.pull_request.commits_url }}
        COMMITS_JSON: /tmp/commits.json
      run: |
        set -xe
        curl -H "Accept: application/vnd.github.v3+json" \
             -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -o ${COMMITS_JSON} ${COMMITS_URL}
        [[ $(file --mime-type ${COMMITS_JSON}) =~ application/json$ ]]
        <${COMMITS_JSON} jq '.message' && false || true
        commits=( $(<${COMMITS_JSON} jq '.[].sha' | cut -d'"' -f2) )
        pcommits=( $(<${COMMITS_JSON} jq '.[].parents[].sha' | cut -d'"' -f2) )
        sha=${pcommits[0]}
        for pcommit in ${pcommits[@]}; do
          pcommit_not_matched=0
          for commit in ${commits[@]}; do
            if [[ ${pcommit} == ${commit} ]]; then
              pcommit_not_matched=1
            fi
          done
          if [[ ${pcommit_not_matched} == 0 ]]; then
            sha=${pcommit}
            break
          fi
        done
        echo "sha=$sha" >> $GITHUB_OUTPUT

    - name: echo pkgs
      id: pkgs
      run: |
        cd /var/db/repos/gentoo-zh
        # Get list of changed files between base and head
        git diff --raw ${{ steps.basecommit.outputs.sha }} ${{ github.event.pull_request.head.sha }}
        diff_files=$(git diff --raw --name-only ${{ steps.basecommit.outputs.sha }} ${{ github.event.pull_request.head.sha }})
        cates=$(cat /var/db/repos/gentoo{,-zh}/profiles/categories | sort -du)
        declare -a check_pkgs
        for file in ${diff_files}; do
          c=${file%%/*}
          for cate in ${cates}; do
            if [[ ${c} == ${cate} ]]; then
              n=${file#*/}
              n=${n%%/*}
              check_pkgs+=( ${c}/${n} )
            fi
          done
        done
        check_pkgs=( $(echo "${check_pkgs[@]}" | tr ' ' '\n' | sort -du | tr '\n' ' ') )
        ret=0
        echo "pkgs: ${check_pkgs[@]}"
        echo "pkgs=${check_pkgs[@]}" >> $GITHUB_OUTPUT

    - name: setup elogs
      run: |
        echo 'PORTAGE_ELOG_CLASSES="qa warn error"' >> /etc/portage/make.conf
        echo 'PORTAGE_ELOG_SYSTEM="save"' >> /etc/portage/make.conf

    - name: cat /etc/portage/make.conf
      run: |
        cat /etc/portage/make.conf

    - name: emerge --onlydeps packages
      run: |
        emerge --quiet --autounmask=y --autounmask-write=y --autounmask-continue=y --onlydeps ${{ steps.pkgs.outputs.pkgs }}
        rm -rf /var/log/portage/elog/

    - name: emerge packages
      run: |
        emerge --quiet --autounmask=y --autounmask-write=y --autounmask-continue=y ${{ steps.pkgs.outputs.pkgs }}

    - name: check Portage elog (fail if exists)
      run: |
        if ls /var/log/portage/elog/* 1> /dev/null 2>&1; then
          echo "❌ Found Portage elog messages:"
          cat /var/log/portage/elog/*
          exit 1
        else
          echo "✅ No elog messages found."
        fi
