diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3547c970..c648c8a8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -503,6 +503,9 @@ option(ENABLE_LLD "Enable build with LLD" OFF)
 option(USE_MOLD "Build with mold linker" OFF)
 option(USE_LLD "Build with lld linker" OFF)
 
+cmake_dependent_option(USE_CET "Build with CET support" OFF
+  "LINUX; OS_X64 OR OS_X86" OFF)
+
 cmake_dependent_option(USE_QT6
   "Build with Qt6 (GUI)" OFF
   "GUI AND NOT WIN32 AND NOT APPLE AND NOT OHOS AND NOT ANDROID" OFF)
@@ -642,6 +645,16 @@ endif()
 
 include(config-ix)
 
+if (USE_CET)
+  if (COMPILER_CLANG)
+    add_compile_options(-fcf-protection=full)
+  elseif(COMPILER_GCC)
+    add_compile_options(-fcf-protection)
+  endif()
+  add_link_options(-Wl,-z,cet-report=error)
+  list(APPEND YASS_APP_FEATURES "cet")
+endif()
+
 # see "Announcement: ARC is default for Objective-C code"
 # https://groups.google.com/a/chromium.org/g/embedder-dev/c/13hNC6w2gGA?pli=1
 if (APPLE)
@@ -3063,7 +3076,11 @@ if (USE_BUILTIN_CA_BUNDLE_CRT)
     if (COMPILER_CLANG)
       set(CMAKE_ASM_FLAGS "${CMAKE_ASM_FLAGS} -Wno-unused-command-line-argument")
     endif()
-    set(ASIO_CA_BUNDLE_CRT_SRC "third_party/ca-certificates/ca-bundle.crt.s")
+    if(CMAKE_SIZEOF_VOID_P EQUAL 4)
+      set(ASIO_CA_BUNDLE_CRT_SRC "third_party/ca-certificates/ca-bundle.crt.m32.s")
+    else()
+      set(ASIO_CA_BUNDLE_CRT_SRC "third_party/ca-certificates/ca-bundle.crt.s")
+    endif()
   endif()
 
   if (APPLE)
@@ -3110,7 +3127,11 @@ if (OHOS OR ANDROID OR CMAKE_SYSTEM_NAME STREQUAL "Linux" OR CMAKE_SYSTEM_NAME S
   if (COMPILER_CLANG)
     set(CMAKE_ASM_FLAGS "${CMAKE_ASM_FLAGS} -Wno-unused-command-line-argument")
   endif()
-  set(ASIO_SUPPLEMENARY_CA_BUNDLE_CRT_SRC "third_party/ca-certificates/supplementary-ca-bundle.crt.s")
+  if(CMAKE_SIZEOF_VOID_P EQUAL 4)
+    set(ASIO_SUPPLEMENARY_CA_BUNDLE_CRT_SRC "third_party/ca-certificates/supplementary-ca-bundle.crt.m32.s")
+  else()
+    set(ASIO_SUPPLEMENARY_CA_BUNDLE_CRT_SRC "third_party/ca-certificates/supplementary-ca-bundle.crt.s")
+  endif()
 endif()
 
 if (APPLE)
diff --git a/third_party/ca-certificates/ca-bundle.crt.m32.s b/third_party/ca-certificates/ca-bundle.crt.m32.s
new file mode 100644
index 00000000..c9c7a6d2
--- /dev/null
+++ b/third_party/ca-certificates/ca-bundle.crt.m32.s
@@ -0,0 +1,16 @@
+.section .rodata
+.hidden _binary_ca_bundle_crt_start
+.global _binary_ca_bundle_crt_start
+.type   _binary_ca_bundle_crt_start, %object
+.hidden _binary_ca_bundle_crt_end
+.global _binary_ca_bundle_crt_end
+.type   _binary_ca_bundle_crt_end, %object
+.align  4
+
+_binary_ca_bundle_crt_start:
+.incbin "ca-bundle.crt"
+
+_binary_ca_bundle_crt_end:
+.previous
+
+.include "cet.32.s"
diff --git a/third_party/ca-certificates/ca-bundle.crt.s b/third_party/ca-certificates/ca-bundle.crt.s
index b4930a01..92ec2a8f 100644
--- a/third_party/ca-certificates/ca-bundle.crt.s
+++ b/third_party/ca-certificates/ca-bundle.crt.s
@@ -12,3 +12,5 @@ _binary_ca_bundle_crt_start:
 
 _binary_ca_bundle_crt_end:
 .previous
+
+.include "cet.64.s"
diff --git a/third_party/ca-certificates/cet.32.s b/third_party/ca-certificates/cet.32.s
new file mode 100644
index 00000000..ea8bb0d8
--- /dev/null
+++ b/third_party/ca-certificates/cet.32.s
@@ -0,0 +1,20 @@
+# Always generate .note.gnu.property section for ELF outputs to
+# mark Intel CET support since all input files must be marked
+# with Intel CET support in order for linker to mark output with
+# Intel CET support.
+.section ".note.gnu.property", "a"
+.p2align 2
+.long 1f - 0f
+.long 4f - 1f
+.long 5
+0:
+.asciz "GNU"
+1:
+.p2align 2
+.long 0xc0000002
+.long 3f - 2f
+2:
+.long 3
+3:
+.p2align 2
+4:
diff --git a/third_party/ca-certificates/cet.64.s b/third_party/ca-certificates/cet.64.s
new file mode 100644
index 00000000..90346540
--- /dev/null
+++ b/third_party/ca-certificates/cet.64.s
@@ -0,0 +1,20 @@
+# Always generate .note.gnu.property section for ELF outputs to
+# mark Intel CET support since all input files must be marked
+# with Intel CET support in order for linker to mark output with
+# Intel CET support.
+.section ".note.gnu.property", "a"
+.p2align 3
+.long 1f - 0f
+.long 4f - 1f
+.long 5
+0:
+.asciz "GNU"
+1:
+.p2align 3
+.long 0xc0000002
+.long 3f - 2f
+2:
+.long 3
+3:
+.p2align 3
+4:
diff --git a/third_party/ca-certificates/supplementary-ca-bundle.crt.m32.s b/third_party/ca-certificates/supplementary-ca-bundle.crt.m32.s
new file mode 100644
index 00000000..0eb9d058
--- /dev/null
+++ b/third_party/ca-certificates/supplementary-ca-bundle.crt.m32.s
@@ -0,0 +1,16 @@
+.section .rodata
+.hidden _binary_supplementary_ca_bundle_crt_start
+.global _binary_supplementary_ca_bundle_crt_start
+.type   _binary_supplementary_ca_bundle_crt_start, %object
+.hidden _binary_supplementary_ca_bundle_crt_end
+.global _binary_supplementary_ca_bundle_crt_end
+.type   _binary_supplementary_ca_bundle_crt_end, %object
+.align  4
+
+_binary_supplementary_ca_bundle_crt_start:
+.incbin "supplementary-ca-bundle.crt"
+
+_binary_supplementary_ca_bundle_crt_end:
+.previous
+
+.include "cet.32.s"
diff --git a/third_party/ca-certificates/supplementary-ca-bundle.crt.s b/third_party/ca-certificates/supplementary-ca-bundle.crt.s
index de4feec6..6de3ac6d 100644
--- a/third_party/ca-certificates/supplementary-ca-bundle.crt.s
+++ b/third_party/ca-certificates/supplementary-ca-bundle.crt.s
@@ -12,3 +12,5 @@ _binary_supplementary_ca_bundle_crt_start:
 
 _binary_supplementary_ca_bundle_crt_end:
 .previous
+
+.include "cet.64.s"
