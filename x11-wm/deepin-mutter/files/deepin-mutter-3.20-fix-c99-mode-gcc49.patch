--- a/src/compositor/meta-blur-actor.c	2017-01-07 10:22:15.169859310 +0800
+++ b/src/compositor/meta-blur-actor.c	2017-01-07 10:24:09.706682897 +0800
@@ -58,7 +58,8 @@
 "float lod = 0.0;"
 "vec2 tc = cogl_tex_coord.st;"
 "cogl_texel = texpick(cogl_sampler, tc, lod) * kernel[21];"
-"for (int i = 1; i < kernel[0]; i++) {"
+"int i;"
+"for ( i = 1; i < kernel[0]; i++) {"
     "cogl_texel += texpick(cogl_sampler, tc - vec2(0.0, kernel[1+i]/resolution.y), lod) * kernel[21+i];"
     "cogl_texel += texpick(cogl_sampler, tc + vec2(0.0, kernel[1+i]/resolution.y), lod) * kernel[21+i];"
 "}";
@@ -67,7 +68,8 @@
 "float lod = 0.0;"
 "vec2 tc = vec2(cogl_tex_coord.s, 1.0 - cogl_tex_coord.t);"
 "cogl_texel = texpick(cogl_sampler, tc, lod) * kernel[21];"
-"for (int i = 1; i < kernel[0]; i++) {"
+"int i;"
+"for ( i = 1; i < kernel[0]; i++) {"
     "cogl_texel += texpick(cogl_sampler, tc + vec2(kernel[1+i]/resolution.x, 0.0), lod) * kernel[21+i];"
     "cogl_texel += texpick(cogl_sampler, tc - vec2(kernel[1+i]/resolution.x, 0.0), lod) * kernel[21+i];"
 "}";
@@ -83,12 +85,13 @@
 
     float sum = powf(2, N);
     weight[radius+1] = 1.0;
-    for (int i = 1; i < radius+2; i++) {
+    int i;
+    for ( i = 1; i < radius+2; i++) {
         weight[radius-i+1] = weight[radius-i+2] * (N-i+1) / i;
     }
     sum -= (weight[radius+1] + weight[radius]) * 2.0;
 
-    for (int i = 0; i < radius; i++) {
+    for ( i = 0; i < radius; i++) {
         offset[i] = (float)i*sigma;
         weight[i] /= sum;
     }
@@ -292,7 +295,8 @@
     uniform_no = cogl_pipeline_get_uniform_location(priv->pipeline2, "resolution");
     cogl_pipeline_set_uniform_float(priv->pipeline2, uniform_no, 2, 1, resolution);
 
-    for (int i = 0; i < priv->rounds; i++) {
+    int i;
+    for ( i = 0; i < priv->rounds; i++) {
         CoglTexture* tex1 = i == 0 ? priv->texture : priv->fbTex2;
         cogl_pipeline_set_layer_texture (priv->pipeline, 0, tex1);
 
@@ -317,7 +321,8 @@
     if (height <= 1) return;
 
     guchar *ln = malloc (stride);
-    for (int i = 0; i < (height+1)/2; i++) {
+    int i;
+    for ( i = 0; i < (height+1)/2; i++) {
         guchar *src = data + i * stride, *target = data + (height - i - 1) * stride;
         memcpy (ln, src, stride);
         memcpy (src, target, stride);
--- a/src/compositor/meta-blur-effect.c	2017-01-06 17:25:30.005210924 +0800
+++ b/src/compositor/meta-blur-effect.c	2017-01-07 09:49:34.092053196 +0800
@@ -42,7 +42,8 @@
 static const char* vs_code = 
 "float lod = 4.6;"
 "cogl_texel = texpick(cogl_sampler, cogl_tex_coord.st, lod) * kernel[21];"
-"for (int i = 1; i < kernel[0]; i++) {"
+"int i;"
+"for ( i = 1; i < kernel[0]; i++) {"
     "cogl_texel += texpick(cogl_sampler, cogl_tex_coord.st - vec2(0.0, kernel[1+i]/resolution.y), lod) * kernel[21+i];"
     "cogl_texel += texpick(cogl_sampler, cogl_tex_coord.st + vec2(0.0, kernel[1+i]/resolution.y), lod) * kernel[21+i];"
 "}";
@@ -51,7 +52,8 @@
 "float lod = 0.0;"
 "vec2 tc = vec2(cogl_tex_coord.s, cogl_tex_coord.t);"
 "cogl_texel = texpick(cogl_sampler, tc, lod) * kernel[21];"
-"for (int i = 1; i < kernel[0]; i++) {"
+"int i;"
+"for ( i = 1; i < kernel[0]; i++) {"
     "cogl_texel += texpick(cogl_sampler, tc + vec2(kernel[1+i]/resolution.x, 0.0), lod) * kernel[21+i];"
     "cogl_texel += texpick(cogl_sampler, tc - vec2(kernel[1+i]/resolution.x, 0.0), lod) * kernel[21+i];"
 "}";
@@ -66,12 +68,13 @@
 
     float sum = powf(2, N);
     weight[radius+1] = 1.0;
-    for (int i = 1; i < radius+2; i++) {
+    int i;
+    for ( i = 1; i < radius+2; i++) {
         weight[radius-i+1] = weight[radius-i+2] * (N-i+1) / i;
     }
     sum -= (weight[radius+1] + weight[radius]) * 2.0;
 
-    for (int i = 0; i < radius; i++) {
+    for ( i = 0; i < radius; i++) {
         offset[i] = (float)i*sigma;
         weight[i] /= sum;
     }
@@ -80,7 +83,8 @@
 
 #if 0
     fprintf (stderr, "kernel = %d\n", radius);
-    for (int i = 0; i < radius; i++) {
+    int i;
+    for ( i = 0; i < radius; i++) {
         fprintf (stderr, "%f %f\n", offset[i], weight[i]);
     }
 #endif
@@ -88,7 +92,8 @@
 #if 1
     //step2: interpolate
     radius = (radius+1)/2;
-    for (int i = 1; i < radius; i++) {
+//  int i;
+    for ( i = 1; i < radius; i++) {
         float w = weight[i*2] + weight[i*2-1];
         float off = (offset[i*2] * weight[i*2] + offset[i*2-1] * weight[i*2-1]) / w;
         offset[i] = off;
--- a/src/compositor/meta-blurred-background-actor.c	2017-01-07 10:15:22.018477139 +0800
+++ b/src/compositor/meta-blurred-background-actor.c	2017-01-07 10:17:43.284071183 +0800
@@ -60,7 +60,8 @@
 static const char* vs_code = 
 "float lod = 0.0;"
 "cogl_texel = texpick(cogl_sampler, cogl_tex_coord.st, lod) * kernel[21];"
-"for (int i = 1; i < kernel[0]; i++) {"
+"int i;"
+"for ( i = 1; i < kernel[0]; i++) {"
     "cogl_texel += texpick(cogl_sampler, cogl_tex_coord.st - vec2(0.0, kernel[1+i]/resolution.y), lod) * kernel[21+i];"
     "cogl_texel += texpick(cogl_sampler, cogl_tex_coord.st + vec2(0.0, kernel[1+i]/resolution.y), lod) * kernel[21+i];"
 "}";
@@ -69,7 +70,8 @@
 "float lod = 0.0;"
 "vec2 tc = vec2(cogl_tex_coord.s, cogl_tex_coord.t);"
 "cogl_texel = texpick(cogl_sampler, tc, lod) * kernel[21];"
-"for (int i = 1; i < kernel[0]; i++) {"
+"int i;"
+"for ( i = 1; i < kernel[0]; i++) {"
     "cogl_texel += texpick(cogl_sampler, tc + vec2(kernel[1+i]/resolution.x, 0.0), lod) * kernel[21+i];"
     "cogl_texel += texpick(cogl_sampler, tc - vec2(kernel[1+i]/resolution.x, 0.0), lod) * kernel[21+i];"
 "}";
@@ -83,14 +85,15 @@
     int N = sz-1;
     float sigma = 1.5f;
 
+    int i;
     float sum = powf(2, N);
     weight[radius+1] = 1.0;
-    for (int i = 1; i < radius+2; i++) {
+    for ( i = 1; i < radius+2; i++) {
         weight[radius-i+1] = weight[radius-i+2] * (N-i+1) / i;
     }
     sum -= (weight[radius+1] + weight[radius]) * 2.0;
 
-    for (int i = 0; i < radius; i++) {
+    for ( i = 0; i < radius; i++) {
         offset[i] = (float)i*sigma;
         weight[i] /= sum;
     }
@@ -100,7 +103,8 @@
 #if 0
     //step2: interpolate
     radius = (radius+1)/2;
-    for (int i = 1; i < radius; i++) {
+    int i;
+    for ( i = 1; i < radius; i++) {
         float w = weight[i*2] + weight[i*2-1];
         float off = (offset[i*2] * weight[i*2] + offset[i*2-1] * weight[i*2-1]) / w;
         offset[i] = off;
@@ -342,7 +346,8 @@
     cogl_pipeline_set_uniform_float(priv->pipeline2, uniform_no, 2, 1, resolution);
 
     int start = get_time();
-    for (int i = 0; i < priv->rounds; i++) {
+    int i;
+    for ( i = 0; i < priv->rounds; i++) {
         CoglTexture* tex1 = i == 0 ? priv->texture : priv->fbTex2;
         cogl_pipeline_set_layer_texture (priv->pipeline, 0, tex1);
 
