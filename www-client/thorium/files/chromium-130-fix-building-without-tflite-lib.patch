--- a/chrome/renderer/chrome_render_frame_observer.cc
+++ b/chrome/renderer/chrome_render_frame_observer.cc
@@ -69,7 +69,6 @@
 #include "url/gurl.h"
 
 #if !BUILDFLAG(IS_ANDROID)
-#include "chrome/renderer/accessibility/read_anything_app_controller.h"
 #include "chrome/renderer/searchbox/searchbox_extension.h"
 #endif  // !BUILDFLAG(IS_ANDROID)
 
@@ -320,21 +319,6 @@ void ChromeRenderFrameObserver::DidCommi
 }
 
 void ChromeRenderFrameObserver::DidClearWindowObject() {
-#if !BUILDFLAG(IS_ANDROID)
-  const base::CommandLine& command_line =
-      *base::CommandLine::ForCurrentProcess();
-  if (command_line.HasSwitch(switches::kInstantProcess))
-    SearchBoxExtension::Install(render_frame()->GetWebFrame());
-
-  // Install ReadAnythingAppController on render frames with the Read Anything
-  // url, which is chrome-untrusted. ReadAnythingAppController installs v8
-  // bindings in the chrome.readingMode namespace which are consumed by
-  // read_anything/app.ts, the resource of the Read Anything WebUI.
-  if (render_frame()->GetWebFrame()->GetDocument().Url() ==
-      chrome::kChromeUIUntrustedReadAnythingSidePanelURL) {
-    ReadAnythingAppController::Install(render_frame());
-  }
-#endif  // !BUILDFLAG(IS_ANDROID)
 }
 
 void ChromeRenderFrameObserver::DidMeaningfulLayout(
--- a/chrome/renderer/BUILD.gn
+++ b/chrome/renderer/BUILD.gn
@@ -383,18 +383,6 @@ static_library("renderer") {
     ]
   } else {
     sources += [
-      "accessibility/ax_tree_distiller.cc",
-      "accessibility/ax_tree_distiller.h",
-      "accessibility/read_aloud_app_model.cc",
-      "accessibility/read_aloud_app_model.h",
-      "accessibility/read_aloud_traversal_utils.cc",
-      "accessibility/read_aloud_traversal_utils.h",
-      "accessibility/read_anything_app_controller.cc",
-      "accessibility/read_anything_app_controller.h",
-      "accessibility/read_anything_app_model.cc",
-      "accessibility/read_anything_app_model.h",
-      "accessibility/read_anything_node_utils.cc",
-      "accessibility/read_anything_node_utils.h",
       "media/chrome_speech_recognition_client.cc",
       "media/chrome_speech_recognition_client.h",
       "searchbox/searchbox.cc",
--- a/services/passage_embeddings/passage_embeddings_service.cc
+++ b/services/passage_embeddings/passage_embeddings_service.cc
@@ -6,7 +6,6 @@
 
 #include "base/files/file.h"
 #include "components/optimization_guide/machine_learning_tflite_buildflags.h"
-#include "services/passage_embeddings/passage_embedder.h"
 
 namespace passage_embeddings {
 
